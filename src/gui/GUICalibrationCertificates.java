package gui;


import certificados.Anemometros.IDRType000;
import certificados.Anemometros.DWGType000;
import certificados.LufftWs300.AC6BaroLufftWs300;
import certificados.LufftWs300.AC6THLufftWs300;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Sensor;
import certificates.General.DataParser;
import certificates.General.Laboratory;
import certificados.Anemometros.IDRType000;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author CRA
 */
public class GUICalibrationCertificates extends javax.swing.JFrame {

    /**
     *
     */
    private static final long serialVersionUID = 1L;
    private DefaultTableModel defaultTableModel;

    /**
     * Creates new form GUICalibrationCertificates
     */
    public GUICalibrationCertificates() {
        initComponents();
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        DataParser sensor = new AC6THLufftWs300();
        populateTable(sensor);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCalData = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableCalData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {},

            new String [] {
                "Measurand", "Laboratory", "Serial", "Slope", "Offset", "CalDate", "Uncert"
            }
        ));
        jTableCalData.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jTableCalData);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUICalibrationCertificates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUICalibrationCertificates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUICalibrationCertificates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUICalibrationCertificates.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUICalibrationCertificates().setVisible(true);
            }
        });
    }

    private void populateTable(DataParser certificateData) {
        ArrayList<Sensor> sensorList = null;

        defaultTableModel = (DefaultTableModel) jTableCalData.getModel();

        try {
            sensorList = certificateData.parser();
        } catch (IOException ex) {
            Logger.getLogger(GUICalibrationCertificates.class.getName()).log(Level.SEVERE, null, ex);
        }

        Object[] sensorsForTable;

        //"Measurand", "Serial", "Slope", "Offset", "CalDate", "Result"
        if (sensorList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "The list is empty. Check that"
                    + "the calibration certificates match the user input");
        } else {

            for (Sensor a : sensorList) {
                sensorsForTable = new Object[]{a.getMeasurand(), a.getLaboratory(), 
                    a.getSerialNumber(), a.getSlope(), a.getOffset(), 
                    a.getCalibrationDate(), a.getUncertainty()};
                defaultTableModel.addRow(sensorsForTable);
            }
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCalData;
    // End of variables declaration//GEN-END:variables
}
